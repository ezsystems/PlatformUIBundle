<!doctype html>
<html class=""><!-- empty class is needed for webcomponents polyfill with ez-yui-app.html import (?!) -->
<head>
    <title>{{ title }}</title>
    <meta name="viewport" content="width=device-width">
    <meta charset="utf-8">

{% stylesheets '$css.files;ez_platformui$' filter='cssrewrite' %}
    <link rel="stylesheet" href="{{ asset_url }}"/>
{% endstylesheets %}

    <style>
        * {
            box-sizing: border-box;
        }
        a, a:visited {
            color: #009;
        }
        body {
            display: flex;
            flex-direction: column;
            margin: 0;
        }
        nav {
            border: 2px solid green;
            flex: 0 0 8em;
        }
        main {
            border: 2px solid red;
            min-height: calc(100vh - 8em);
            flex: 1 0;
            display: flex;
        }
        aside {
            border: 2px solid blue;
            flex: 0 0 230px;
        }
        menu {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        menu li {
            line-height: 3;
            border: 1px solid purple;
        }
        ez-browse:after {
            content: " (" attr(location-id) ")";
        }
        .ez-main-content {
            flex: 1 1;
        }

        ez-subitem {
            border: 1px solid aqua;
        }
    </style>

    <script src="{{ asset('bundles/ezplatformui/vendors/webcomponentsjs/webcomponents-lite.js') }}"></script>

    <link rel="import" href="{{ asset( 'bundles/ezplatformui/webcomponents/ez-subitem.html' ) }}">
    <link rel="import" href="{{ asset( 'bundles/ezplatformui/webcomponents/ez-universaldiscoverywidget.html' ) }}">
    <link rel="import" href="{{ asset( 'bundles/ezplatformui/webcomponents/ez-browse.html' ) }}">

</head>
<body class="ez-platformui-app is-app-open">
    <nav>
        I'm the navigation hub
        <ul>
            <li><a href="{{ path( 'proto_dashboard' ) }}">Dashboard</a></li>
            <li><a href="{{ path( 'proto_viewLocation', {locationId: 2} ) }}">Content structure</a></li>
            <li><a href="{{ path( 'proto_viewLocation', {locationId: 43} ) }}">Media library</a></li>
        </ul>
    </nav>
    <main>
        <aside>
            <menu>
            {% for component in actionBarComponents %}
                <li id="{{ component.id }}">{{ component.html|raw }}</li>
            {% endfor %}
            </menu>
        </aside>
        <div class="ez-main-content">
            {{ content|raw }}
        </div>
    </main>
    <script>
    (function () {
        // this is totally hackish, we should probably use something like
        // FOSJsRoutingBundle to properly expose routes and allow to generate
        // proper URI from JavaScript
        const viewLocationRoute = "{{ path( 'proto_viewLocation', {locationId: 99999} )|replace({'99999': '{locationId}'}) }}";

        function fetchUpdate(updateUrl) {
            var headers;

            headers = new Headers({
                'X-AJAX-Update': '1',
            });
            return fetch(updateUrl, {
                credentials: 'same-origin',
                headers: headers,
            }).then(function (response) {
                return response.json();
            }).then(function (struct) {
                struct.url = updateUrl;

                return struct;
            });
        }

        function updatePage(struct) {
            document.title = struct.title;
            document.querySelector('.ez-main-content').innerHTML = struct.content;

            struct.actionBarComponents.forEach(function (componentUpdate) {
                var container = document.getElementById(componentUpdate.id);

                if ( typeof componentUpdate.update === "string" ) {
                    container.innerHTML = componentUpdate.update;
                } else if ( componentUpdate.update ) {
                    Object.keys(componentUpdate.update).forEach(function (selector) {
                        var element = container.querySelector(selector),
                            attributes = componentUpdate.update[selector];

                        Object.keys(componentUpdate.update[selector]).forEach(function (attributeName) {
                            // TODO we should handle setting the content as well
                            element.setAttribute(attributeName, attributes[attributeName]);
                        });
                    });
                }
            });

            return struct;
        }

        function replaceHistory(struct) {
            history.pushState({url: struct.url}, struct.title, struct.url);

            return struct;
        }

        document.body.addEventListener('click', function (e) {
            var updateUrl,
                hrefAttr = e.target.getAttribute('href');

            function isNavigationLink(element) {
                return e.target.nodeName === 'A' && e.target.href && e.target.getAttribute('href').indexOf('#') !== 0
            }

            if ( isNavigationLink(e.target) ) {
                updateUrl = e.target.href;
                e.preventDefault();

                fetchUpdate(updateUrl)
                    .then(updatePage)
                    .then(replaceHistory);
            }
        });
        document.body.addEventListener('browseToContent', function (e) {
            fetchUpdate(viewLocationRoute.replace('{locationId}', e.detail.location.locationId))
                .then(updatePage)
                .then(replaceHistory);
        });
        document.body.addEventListener('contentDiscover', function (e) {
            const udw = document.createElement('ez-universaldiscoverywidget');

            udw.title = e.detail.title;
            udw.multiple = e.detail.multiple;
            udw.onconfirm = function (selection) {
                e.detail.onconfirm.call(udw, selection);
                // removing the UDW is a bit brutal as this prevents
                // any kind of animation when hiding the UDW.
                udw.remove(true);
            }
            udw.oncancel = function (selection) {
                if ( e.detail.oncancel ) {
                    e.detail.oncancel.call(udw, selection);
                }
                udw.remove(true);
            }
            udw.isSelectable = e.detail.isSelectable ? e.detail.isSelectable : undefined;
            udw.startingLocationId = e.detail.startingLocationId;
            // that way existing PlatformUI stylesheets work out of the box
            udw.classList.add('ez-universaldiscovery-container');
            document.body.appendChild(udw);
        });
        window.addEventListener('popstate', function (e) {
            if ( e.state && e.state.url ) {
                fetchUpdate(e.state.url)
                    .then(updatePage)
                    .then(replaceHistory);
            }
        });
    })();
    </script>

    <script>
    (function () {
        document.addEventListener('click', function (e) {
            if ( e.target.classList.contains('run-udw') ) {
                const button = e.target;
                const event = new CustomEvent('contentDiscover', {
                    detail: {
                        title: "UDW tests (multiple, allow only container)",
                        multiple: true,
                        oncancel: function () {
                            console.log('CANCEL');
                        },
                        onconfirm: function (items) {
                            var list = document.createElement('ul');
                            items.forEach(function (selection) {
                                const result = document.createElement('li');

                                result.innerHTML = `${selection.location.contentInfo.name}
                                    (Content id #${selection.content.contentId}) in Location
                                    #${selection.location.locationId}
                                    (${selection.location.pathString}) was
                                    chosen (Type ${selection.contentType.names['eng-GB']})`;

                                list.appendChild(result);
                            });
                            button.parentNode.insertBefore(list, button);
                        },
                        isSelectable: function (item) {
                            return item.contentType.isContainer;
                        },
                    },
                    bubbles: true,
                });
                button.dispatchEvent(event);
            }
        });
    })();
    </script>

</body>
</html>
