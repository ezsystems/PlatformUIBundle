YUI.add('ez-float-editview', function (Y) {
    "use strict";
    /**
     * Provides the field edit view for the Float (ezfloat) fields
     *
     * @module ez-float-editview
     */

    Y.namespace('eZ');

    var L = Y.Lang,
        FIELDTYPE_IDENTIFIER = 'ezfloat';

    /**
     * Float edit view
     *
     * @namespace eZ
     * @class FloatEditView
     * @constructor
     * @extends eZ.FieldEditView
     */
    Y.eZ.FloatEditView = Y.Base.create('floatEditView', Y.eZ.FieldEditView, [], {
        events: {
            '.ez-float-input-ui input': {
                'blur': 'validate',
                'valuechange': 'validate'
            }
        },

        /**
         * Validates the current input of Float
         *
         * @method validate
         */
        validate: function () {
            var validity = this._getInputValidity(),
                config = this._variables();

            if ( validity.badInput ) {
                this.set(
                    'errorStatus',
                    'The value should be a valid float number'
                );
            } else if ( validity.rangeOverflow ) {
                this.set(
                    'errorStatus',
                    L.sub('The value should be less than {maxFloatValue}', config)
                );
            } else if ( validity.rangeUnderflow ) {
                this.set(
                    'errorStatus',
                    L.sub('The value should be more than {minFloatValue}', config)
                );
            } else if ( validity.valueMissing ) {
                this.set('errorStatus', 'This field is required');
            } else {
                this.set('errorStatus', false);
            }
        },

        /**
         * Defines the variables to be imported in the field edit template for
         * float
         *
         * @protected
         * @method _variables
         * @return {Object} containing isRequired, minFloatValue and
         * maxFloatValue entries
         */
        _variables: function () {
            var minFloatValue = false,
                maxFloatValue = false,
                def = this.get('fieldDefinition');

            if ( def.validatorConfiguration.FloatValueValidator.minFloatValue ) {
                minFloatValue = def.validatorConfiguration.FloatValueValidator.minFloatValue;
            }
            if ( def.validatorConfiguration.FloatValueValidator.maxFloatValue ) {
                maxFloatValue = def.validatorConfiguration.FloatValueValidator.maxFloatValue;
            }

            return {
                "isRequired": def.isRequired,
                "minFloatValue": minFloatValue,
                "maxFloatValue": maxFloatValue
            };
        },

        /**
         * Returns the input validity state object for the input generated by
         * the Float template
         *
         * See https://developer.mozilla.org/en-US/docs/Web/API/ValidityState
         *
         * @protected
         * @method _getInputValidity
         * @return {ValidityState}
         */
        _getInputValidity: function () {
            return this.get('container').one('.ez-float-input-ui input').get('validity');
        }
    });

    Y.eZ.FieldEditView.registerFieldEditView(
        FIELDTYPE_IDENTIFIER, Y.eZ.FloatEditView
    );
});
